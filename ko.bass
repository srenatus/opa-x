#!/usr/bin/env bass
(provide [oci]
  (def *ko-cache* (cache-dir "ko-cache"))
  (def *go-cache* (cache-dir "go-cache"))

  (defn build-oci [src]
    (let [out ./oci/]
      (-> (from (linux/ghcr.io/ko-build/ko)
            (cd src
              (-> ($ ko build --push=false --oci-layout-path (str out) ./)
                  (with-env {:KOCACHE "/ko-cache"
                             :GOCACHE "/go-cache"})
                  (with-mount *ko-cache* /ko-cache/)
                  (with-mount *go-cache* /go-cache/))))
          (subpath out))))

  (defn fixup [manifest]
    (merge manifest {:annotations {:org.opencontainers.image.ref.name "latest"}}))

  (defn fixup-annotations [oci-dir]
     (let [index oci-dir/index.json
           manifest (next (read index :json))]
        (merge manifest {:manifests (map fixup (:manifests manifest))})))

  (defn build [src]
    (let [out ./output.tar
          oci-dir (build-oci src)
          new-index (fixup-annotations oci-dir)]
      (-> (from (linux/ghcr.io/ko-build/ko) ; avoid fetching another image, this one has GNU tar, too
            ($ tar cvf $out -C $oci-dir ./oci-layout/ ./blobs/)
            ($ tar rvf $out  -C (mkfs ./index.json (json new-index)) ./index.json))
          (subpath out))))

  (defn oci [src]
    {:file (build src)
     :platform {:os "linux"}
     :tag "latest"
    })
)
